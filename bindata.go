// Code generated by go-bindata.
// sources:
// build-config.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _buildConfigYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\x41\xcf\x9a\x40\x10\x86\xef\xfb\x2b\xe6\x07\x08\x68\xd3\x34\xba\x89\x07\x10\x6a\x88\x22\x06\x5b\x2f\x4d\x43\x56\x18\x71\xe3\xb2\x4b\x77\x17\x1b\xff\x7d\x17\xa9\xad\x87\xef\x3b\x7c\xa7\x65\x9e\x77\xde\x77\xc8\x0c\xaf\x29\xf8\xbe\x4f\x2a\x25\x2d\xe3\x12\x35\x25\x00\xf6\xde\x21\x85\x38\x5f\x6d\x92\xc2\x95\xb5\xaa\xae\xa3\x00\xc0\x5b\xd6\xe0\x68\x19\xca\xb3\xd2\x15\xee\x7b\x21\xd2\x91\x9f\x99\x30\xf8\x50\x24\xda\xdf\x4a\x5f\x29\x44\x45\x1a\xaf\x93\x07\xeb\x94\xb6\x19\xeb\x3a\x2e\x1b\x33\xc6\x01\x78\x70\x51\xc6\xee\x9d\x42\x61\x3a\x76\x31\xcd\x5a\xb4\xa8\xff\xf7\xfc\x7d\x01\xae\x78\xa7\x20\x54\xe3\xd5\x9a\xdf\x50\xff\xe3\x37\x26\x7a\x37\xbe\x41\x71\x7e\xdf\xa3\x3a\xfb\x96\xc1\x63\x75\xad\xd1\x98\x65\x5f\x77\x34\x08\x4e\xec\x24\x3c\xc3\x2c\x0a\xc1\x2d\xce\xe8\xe7\xc5\x7c\xfe\xa1\x4c\x94\xb7\x65\x14\x46\xdb\x32\xcb\xe3\xef\xdb\x64\xf2\xf2\x5d\x1e\x93\xe2\x90\xe6\xbb\xc9\x21\x29\x8e\xe9\x2a\x29\xbf\x85\xeb\x03\xe1\xd2\x58\x26\x2b\x34\x14\x66\xa4\xea\x7a\xf7\x4e\xfd\x19\x69\xb1\x75\xe0\x0b\xe9\x35\x77\xe4\xc7\x4f\xe2\x82\x87\x8d\xbc\x7a\x29\x0c\xbf\xeb\xe0\xcb\x90\xe7\x75\x1e\x68\x95\x67\x59\xb8\x8b\x29\x04\x27\x2e\x03\xb7\xfb\xa7\xb0\x09\xbf\x6e\xc2\x32\x2a\x72\x77\x63\x17\xf3\xab\xc7\x1e\xfd\x21\xcc\x37\x17\xba\x98\x2e\x3e\x91\xaa\xad\xc7\x78\xcf\xa0\x1e\x96\xfd\x27\x00\x00\xff\xff\x9a\xe6\x30\xb5\x2c\x02\x00\x00")

func buildConfigYmlBytes() ([]byte, error) {
	return bindataRead(
		_buildConfigYml,
		"build-config.yml",
	)
}

func buildConfigYml() (*asset, error) {
	bytes, err := buildConfigYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "build-config.yml", size: 556, mode: os.FileMode(420), modTime: time.Unix(1467304033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"build-config.yml": buildConfigYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"build-config.yml": &bintree{buildConfigYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

